{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\biswa\\\\Desktop\\\\Hunter\\\\Fourth Semester\\\\WebDev\\\\FinalProj\\\\ClientSideCRUD\\\\src\\\\components\\\\containers\\\\AllStudentsContainer.js\";\n/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllStudentsThunk, deleteStudentThunk, editStudentThunk } from '../../store/thunks';\nimport AllStudentsView from '../views/AllStudentsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllStudentsContainer extends Component {\n  // Get all students data from back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents();\n  }\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllStudentsView, {\n        students: this.props.allStudents,\n        deleteStudent: this.props.deleteStudent,\n        removeStudentFromCampus: this.props.removeStudentFromCampus,\n        enrollStudentToCampus: this.props.enrollStudentToCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = state => {\n  return {\n    allStudents: state.allStudents // Get the State object from Reducer \"allStudents\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId)),\n    removeStudentFromCampus: studentId => dispatch(editStudentThunk({\n      id: studentId,\n      campusId: null\n    })),\n    enrollStudentToCampus: (studentId, campusId) => dispatch(editStudentThunk({\n      id: studentId,\n      campusId\n    }))\n  };\n};\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["Header","Component","connect","withRouter","fetchAllStudentsThunk","deleteStudentThunk","editStudentThunk","AllStudentsView","AllStudentsContainer","componentDidMount","props","fetchAllStudents","render","allStudents","deleteStudent","removeStudentFromCampus","enrollStudentToCampus","mapState","state","mapDispatch","dispatch","studentId","id","campusId"],"sources":["C:/Users/biswa/Desktop/Hunter/Fourth Semester/WebDev/FinalProj/ClientSideCRUD/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { \r\n  fetchAllStudentsThunk,\r\n  deleteStudentThunk,\r\n  editStudentThunk \r\n} from '../../store/thunks';\r\n\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nclass AllStudentsContainer extends Component {\r\n  // Get all students data from back-end database\r\n  componentDidMount() {\r\n    this.props.fetchAllStudents();\r\n  }\r\n\r\n  // Render All Students view by passing all students data as props to the corresponding View component\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <AllStudentsView \r\n          students={this.props.allStudents}\r\n          deleteStudent={this.props.deleteStudent}   \r\n          removeStudentFromCampus={this.props.removeStudentFromCampus}\r\n          enrollStudentToCampus={this.props.enrollStudentToCampus}\r\n\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\r\nconst mapState = (state) => {\r\n  return {\r\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\r\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n    removeStudentFromCampus: (studentId) => dispatch(editStudentThunk({ id: studentId, campusId: null })),\r\n    enrollStudentToCampus: (studentId, campusId) => dispatch(editStudentThunk({ id: studentId, campusId }))\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SACEC,qBAAqB,EACrBC,kBAAkB,EAClBC,gBAAgB,QACX,oBAAoB;AAE3B,OAAOC,eAAe,MAAM,0BAA0B;AAAC;AAEvD,MAAMC,oBAAoB,SAASP,SAAS,CAAC;EAC3C;EACAQ,iBAAiB,GAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,EAAE;EAC/B;;EAEA;EACAC,MAAM,GAAE;IACN,oBACE;MAAA,wBACE,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,eAAe;QACd,QAAQ,EAAE,IAAI,CAACF,KAAK,CAACG,WAAY;QACjC,aAAa,EAAE,IAAI,CAACH,KAAK,CAACI,aAAc;QACxC,uBAAuB,EAAE,IAAI,CAACJ,KAAK,CAACK,uBAAwB;QAC5D,qBAAqB,EAAE,IAAI,CAACL,KAAK,CAACM;MAAsB;QAAA;QAAA;QAAA;MAAA,QAExD;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLL,WAAW,EAAEK,KAAK,CAACL,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMM,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLT,gBAAgB,EAAE,MAAMS,QAAQ,CAAChB,qBAAqB,EAAE,CAAC;IACzDU,aAAa,EAAGO,SAAS,IAAKD,QAAQ,CAACf,kBAAkB,CAACgB,SAAS,CAAC,CAAC;IACrEN,uBAAuB,EAAGM,SAAS,IAAKD,QAAQ,CAACd,gBAAgB,CAAC;MAAEgB,EAAE,EAAED,SAAS;MAAEE,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC;IACrGP,qBAAqB,EAAE,CAACK,SAAS,EAAEE,QAAQ,KAAKH,QAAQ,CAACd,gBAAgB,CAAC;MAAEgB,EAAE,EAAED,SAAS;MAAEE;IAAS,CAAC,CAAC;EACxG,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAepB,UAAU,CAACD,OAAO,CAACe,QAAQ,EAAEE,WAAW,CAAC,CAACX,oBAAoB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}