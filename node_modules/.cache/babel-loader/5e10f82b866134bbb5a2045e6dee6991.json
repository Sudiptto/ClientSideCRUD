{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\biswa\\\\Desktop\\\\Hunter\\\\Fourth Semester\\\\WebDev\\\\FinalProj\\\\ClientSideCRUD\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      const campus = {\n        id: this.props.campus.id,\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl || undefined // Use default if empty\n      };\n\n      // Edit the campus in the back-end database\n      await this.props.editCampus(campus);\n\n      // Redirect to the updated campus's page\n      this.setState({\n        redirect: true,\n        redirectId: campus.id\n      });\n    };\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  // Fetch the campus details when the component mounts\n  async componentDidMount() {\n    const campusId = this.props.match.params.id;\n    await this.props.fetchCampus(campusId);\n    const {\n      name,\n      address,\n      description,\n      imageUrl\n    } = this.props.campus;\n    this.setState({\n      name,\n      address,\n      description,\n      imageUrl\n    });\n  }\n\n  // Capture input data when it is entered\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render the edit campus form\n  render() {\n    // Redirect to the updated campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campus: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Map state to props\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n};\n\n// Map dispatch to props\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n};\n\n// Export store-connected container by default\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","EditCampusView","fetchCampusThunk","editCampusThunk","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","id","state","address","description","imageUrl","undefined","editCampus","redirect","redirectId","componentDidMount","campusId","match","params","fetchCampus","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"sources":["C:/Users/biswa/Desktop/Hunter/Fourth Semester/WebDev/FinalProj/ClientSideCRUD/src/components/containers/EditCampusContainer.js"],"sourcesContent":["import Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport EditCampusView from '../views/EditCampusView';\r\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\r\n\r\nclass EditCampusContainer extends Component {\r\n  // Initialize state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n      imageUrl: \"\",\r\n      redirect: false,\r\n      redirectId: null,\r\n    };\r\n  }\r\n\r\n  // Fetch the campus details when the component mounts\r\n  async componentDidMount() {\r\n    const campusId = this.props.match.params.id;\r\n    await this.props.fetchCampus(campusId);\r\n    const { name, address, description, imageUrl } = this.props.campus;\r\n    this.setState({ name, address, description, imageUrl });\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Take action after user clicks the submit button\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault(); // Prevent browser reload/refresh after submit.\r\n\r\n    const campus = {\r\n      id: this.props.campus.id,\r\n      name: this.state.name,\r\n      address: this.state.address,\r\n      description: this.state.description,\r\n      imageUrl: this.state.imageUrl || undefined, // Use default if empty\r\n    };\r\n\r\n    // Edit the campus in the back-end database\r\n    await this.props.editCampus(campus);\r\n\r\n    // Redirect to the updated campus's page\r\n    this.setState({\r\n      redirect: true,\r\n      redirectId: campus.id,\r\n    });\r\n  };\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n    this.setState({ redirect: false, redirectId: null });\r\n  }\r\n\r\n  // Render the edit campus form\r\n  render() {\r\n    // Redirect to the updated campus's page after submit\r\n    if (this.state.redirect) {\r\n      return <Redirect to={`/campus/${this.state.redirectId}`} />;\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <EditCampusView\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n          campus={this.state}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Map state to props\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,\r\n  };\r\n};\r\n\r\n// Map dispatch to props\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}